scalar Date

type List {
    id: Int!
    title: String!
    createdAt: Date!
    updatedAt: Date!
    deletedAt: Date!
    tasks: [Task!]
}

type Task {
    id: Int!
    title: String!
    createdAt: Date!
    updatedAt: Date!
    deletedAt: Date!
    list: List!
    listId: Int!
    order: Int!
    completed: Boolean!
}

type ListResult {
  lists: [List!]
  pageInfo: PageInfo!

}

type PageInfo {
  totalCount: Int!
  page: Int!
  pageSize: Int!
  hasNextPage: Boolean!
}

input CreateList {
    title: String
}

input UpdateTask {
    id: Int
    title: String!
    completed: Boolean!
}

input CreateTask {
    listId: Int
    title: String
}

input MoveTask {
    taskId: Int
    position: Int
}

type Query {
    getPaginatedList(page: Int!, pageSize: Int!): ListResult!
}

type Mutation {
    createList(input: CreateList): List!
    updateTask(input: UpdateTask): Task!
    createTask(input: CreateTask): Task!
    moveTask(input: MoveTask): Task!
}